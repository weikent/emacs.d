
;;; init-org.el --- 

;; Copyright 2014 世建 魏
;;
;; Author: weikent@localhost
;; Version: $Id: init-org.el,v 0.0 2014/05/13 00:57:35 weikent Exp $
;; Keywords: 
;; X-URL: not distributed yet

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

;;; Commentary:

;; 

;; Put this file into your load-path and the following into your ~/.emacs:
;;   (require 'init-org)

;;; Code:



;; (setq load-path (cons "~/emacs/lisps/org" load-path))
;; (setq load-path (cons "~/lib/emacs-lisp/org-7.01h/contrib/lisp" load-path))
;;(add-to-list 'load-path "~/org-mode/lisp")
;;(add-to-list 'load-path "~/org-mode/contrib/lisp")
(message "start org-mode")

(require 'org)

(setq org-log-done t) 

;;(require 'org-install)
;;(require 'org-publish) ;; 在org8.0中被ox-publish替代
(require 'ox-publish)


;; 这些快捷键我都不知道是干啥的。
;; (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
;; (add-hook 'org-mode-hook 'turn-on-font-lock)
;; (add-hook 'org-mode-hook 
;;           (lambda () (setq truncate-lines nil)))

;; (global-set-key "\C-cl" 'org-store-link)
;; (global-set-key "\C-ca" 'org-agenda)
;; (global-set-key "\C-cb" 'org-iswitchb)
;; (define-key global-map "\C-cl" 'org-store-link)
;; (define-key global-map "\C-ca" 'org-agenda)



;;http://orgmode.org/manual/Export-settings.html
;;http://orgmode.org/manual/Publishing-options.html
(setq org-export-with-section-numbers 10)
;; 设置在org-mode里面看到语法高亮的效果
(require 'htmlize)
(setq org-src-fontify-natively t)
;; (org-block-begin-line
;;  ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
;; (org-block-background
;;  ((t (:background "#FFFFEA"))))
;; (org-block-end-line
;;  ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
;; (defface org-block-begin-line
;;   '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
;;   "Face used for the line delimiting the begin of source blocks.")

;; (defface org-block-background
;;   '((t (:background "#FFFFEA")))
;;   "Face used for the source block background.")

;; (defface org-block-end-line
;;   '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
;;   "Face used for the line delimiting the end of source blocks.")

(setq org-html-postamble t)
(setq org-html-postamble-format
      '(("en" "<hr><p class=\"author\">Author: %a (%e)</p>\n<p class=\"date\">Date: %d</p>\n<p class=\"creator\">%c</p>\n<p class=\"validation\">%v</p>")))
;; (setq org-export-html-postamble-format
;; '(("en" "<hr>
;; <p class=\"author\">Author: %a (%e)</p>
;; <p class=\"date\">Date: %d</p>
;; <p class=\"creator\">Generated by %c</p>
;; <p class=\"xhtml-validation\">%v</p>
;; ")))

;; (setq org-export-html-postamble-format 
;;       '(("en" "<p class=\"postamble\">Last Updated %d. Created by %c"</p>)))

;; (setq org-export-html-postamble-format 
;;       '(("en" "<p class=\"postamble\">Last Updated %d. Created by %c"</p>)))

;; '(;; for common html export
;; 	("en"
;; 	 "<hr/><p class=\"author\">Author: <a href=\"http://everet.org/about-me/\">%a</a> </p>\n<p class=\"date\">Last Updated: %d</p>")
;; 	;; for org-notes
;; 	("zh-CN"
;; 	 "<hr/><p class=\"author\">Author: <a href=\"http://everet.org/about-me/\">%a</a> </p>\n<p class=\"date\">Last Updated: %d</p>\n
;;     <div id=\"disqus_thread\"></div>
;;     <script type=\"text/javascript\">
;;         /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
;;         var disqus_shortname = 'everet'; // required: replace example with your forum shortname
;;         /* * * DON'T EDIT BELOW THIS LINE * * */
;;         (function() {
;;             var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
;;             dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
;;             (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
;;         })();
;;     </script>
;;     <noscript>Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>
;;     <a href=\"http://disqus.com\" class=\"dsq-brlink\">comments powered by <span class=\"logo-disqus\">Disqus</span></a>
;; "
;; 	 )))

(if *is-a-mac*
    
(setq org-publish-project-alist
      '(("Org"
         :base-directory "~/KuaiPan/Org_Git/Org_Org"
         :publishing-directory "~/KuaiPan/Org_Git/Org_Publish"
         :base-extension "org"
         :recursive t
         :publishing-function org-html-publish-to-html ;;org-publish-org-to-html
         :auto-index nil
         ;; :index-filename "index.org"
         ;; :index-title "index"
         ;; :link-home "index.html"
         :section-numbers 10
         :htmlized-source t
         :html-head "<link rel=\"stylesheet\" href=\"../emacs.css\" type=\"text/css\"/>"
         )
        ("images"
         :base-directory "~/KuaiPan/Org_Git/Org_Org"
         :publishing-directory "~/KuaiPan/Org_Git/Org_Publish"
         :recursive t
         :base-extension "png\\|jpeg\\|gif"
         :publishing-function org-publish-attachment
         )
        ("Css"
         :base-directory "~/.emacs.d/Org_Css/"
         :publishing-directory "~/KuaiPan/Org_Git/Org_Publish"
         :recursive t
         :base-extension "css"
         :publishing-function org-publish-attachment
         )
        ("publish" 
         :components ("Org" "images" "Css")
         :author "wei.shijian@gmail.com"
         )))
(setq org-publish-project-alist
      '(("Org"
         :base-directory "/media/psf/Home/KuaiPan/Org_Git/Org_Org"
         :publishing-directory "/media/psf/Home/KuaiPan/Org_Git/Org_Publish"
         :base-extension "org"
         :recursive t
         :publishing-function org-html-publish-to-html ;;org-publish-org-to-html
         :auto-index nil
         ;; :index-filename "index.org"
         ;; :index-title "index"
         ;; :link-home "index.html"
         :section-numbers 10
         :htmlized-source t
         :html-head "<link rel=\"stylesheet\" href=\"../emacs.css\" type=\"text/css\"/>"
         )
        ("images"
         :base-directory "/media/psf/Home/KuaiPan/Org_Git/Org_Org"
         :publishing-directory "/media/psf/Home/KuaiPan/Org_Git/Org_Publish"
         :recursive t
         :base-extension "png\\|jpeg\\|gif"
         :publishing-function org-publish-attachment
         )
        ("Css"
         :base-directory "~/.emacs.d/Org_Css/"
         :publishing-directory "/media/psf/Home/KuaiPan/Org_Git/Org_Publish"
         :recursive t
         :base-extension "css"
         :publishing-function org-publish-attachment
         )
        ("publish" 
         :components ("Org" "images" "Css")
         :author "wei.shijian@gmail.com"
         )))
)
(setq org-startup-indented t)


(autoload 'iimage-mode "iimage" "Support Inline image minor mode." t)
(autoload 'turn-on-iimage-mode "iimage" "Turn on Inline image minor mode." t)

(defun org-toggle-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (if (face-underline-p 'org-link)
      (set-face-underline-p 'org-link nil)
    (set-face-underline-p 'org-link t))
  (iimage-mode))

;; iimage mode
(autoload 'iimage-mode "iimage" "Support Inline image minor mode." t)
(autoload 'turn-on-iimage-mode "iimage" "Turn on Inline image minor mode." t)





(defface hi-red-b '((t (:foreground "#e50062"))) t)

(defun org-bold-highlight ()
  (interactive)
  (hi-lock-mode)
  (highlight-regexp "[ \\t]\\(\\*\\(\\S-[^*]+\\S-\\|[^*]\\{1,2\\}\\)\\*\\)[ \\t\\n]*" 'hi-red-b))

(add-hook 'org-mode-hook 'org-bold-highlight)




;; 用于设置颜色。
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (global-hi-lock-mode 1) ;开启全局 hi lock 模式                            ;;
;; ;避免每次开启 hi lock mode 时询问是否需要高亮指定表达式                   ;;
;; (setq hi-lock-file-patterns-policy #'(lambda (dummy) t))                  ;;
;; ; 各种 face 的定义                                                        ;;
;; (defface phone-number-lock-face '((t (:foreground "FF0000"))) t)          ;;
;; (defface language-lock-face '((t (:foreground "00FF00"))) t)              ;;
;; (defface emacs-vim-lock-face '((t (:foreground "9900FF"))) t)             ;;
;;                                                                           ;;
;; ; 利用 highlight-regexp 高亮指定的正则表达式                              ;;
;; (defun bigboss-highlight ()                                               ;;
;;   (interactive)                                                           ;;
;;   (highlight-regexp "0[0-9]\\{2\\}-[0-9]\\{8\\}" 'phone-number-lock-face) ;;
;;   (highlight-regexp "Lisp\\|Scheme" 'language-lock-face)                  ;;
;;   (highlight-regexp "神之编辑器\\|编辑器之神" 'emacs-vim-lock-face)       ;;
;; )                                                                         ;;
;;                                                                           ;;
;; ; org mode 中开启高亮                                                     ;;
;; (add-hook 'org-mode-hook 'bigboss-highlight)                              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




;; 然后就可以用命令

;; M-x iimage-mode RET
;; 在当前模式里启动 iimage 这个 minor mode。

;; 如果想在 Emacs org 模式里启用 iimage 模式，把下面的代码放到配置文件里，则可以在 Emacs Org 的编辑区里显示图片。

;; (defun org-toggle-iimage-in-org ()
;;   "display images in your org file"
;;   (interactive)
;;   (if (face-underline-p 'org-link)
;;       (set-face-underline-p 'org-link nil)
;;     (set-face-underline-p 'org-link t))
;;   (iimage-mode))

;; (global-set-key (read-kbd-macro "<C-tab>") 'my-insert-tab) 

(provide 'init-org)
(eval-when-compile
  (require 'cl))



;;;;##########################################################################
;;;;  User Options, Variables
;;;;##########################################################################





;;; init-org.el ends here



;;  "<style type='text/css'>

;;     body {
;;         padding: 50px 150px 50px 150px;
;;         border-style: solid;
;;         border-width: 20pt;
;;         border-color: #790000;
;;     }

;;     body, p, li {
;;             /*font-family: monospace;*/
;;                 font-family: \"Microsoft YaHei\" ! important;
;;             font-size: 1em;
;;     }

;; .outline-2{
;;     margin-left:30px;
;; }
;; .outline-text-2{
;;     margin-left:20px;
;; }
;; .outline-3{
;;     margin-left:40px;
;; }
;; .outline-4{
;;     margin-left:50px;
;; }
;; .outline-5{
;;     margin-left:60px;
;; }
;; /*
;; p{
;;     margin-left:10px;
;; }
;; */
;; ul{
;;     margin-left:-20px;
;; }
;; li{
;;     color:blue;
;; }

;; </style>"


;;这是一个可以引用外部css链接的方式，但由于无法确定css的位置，所以放弃了
;;"<link rel=\"stylesheet\" href=\"Org_Css/emacs.css\" type=\"text/css\"/>"





;; about todo list
(setq org-todo-keywords
  '((type "工作(w!)" "学习(s!)" "休闲(l!)" "|")
    (sequence "PENDING(p!)" "TODO(t!)"  "|" "DONE(d!)" "ABORT(a@/!)")
    ))


(setq org-todo-keyword-faces
  '(("工作" .      (:background "red" :foreground "white" :weight bold))
    ("学习" .      (:background "white" :foreground "red" :weight bold))
    ("休闲" .      (:foreground "MediumBlue" :weight bold)) 
    ("PENDING" .   (:background "LightGreen" :foreground "gray" :weight bold))
    ("TODO" .      (:background "DarkOrange" :foreground "black" :weight bold))
    ("DONE" .      (:background "azure" :foreground "Darkgreen" :weight bold)) 
    ("ABORT" .     (:background "gray" :foreground "black"))
    ))

;; (setq org-todo-keywords
;;            '((sequence "TODO(t!)" "|" "DONE(d!)")
;;              (sequence "REPORT(r!)" "BUG(b!)" "KNOWNCAUSE(k!)" "|" "FIXED(f!)")
;;              (sequence "|" "CANCELED(c@)")))

;; (setq org-todo-keyword-faces
;;   '(("TODO" .      (:background "red" :foreground "white" :weight bold))
;;     ("DONE" .      (:background "white" :foreground "red" :weight bold))
;;     ("REPORT" .      (:foreground "MediumBlue" :weight bold)) 
;;     ("BUG" .   (:background "LightGreen" :foreground "gray" :weight bold))
;;     ("KNOWNCAUSE" .      (:background "DarkOrange" :foreground "black" :weight bold))
;;     ("FIXED" .      (:background "azure" :foreground "Darkgreen" :weight bold)) 
;;     ("CANCLED" .     (:background "gray" :foreground "black"))
;;     ))


;; 设置为t 。 意味着 子任务不完成，父任务就不能设置为 done
(setq org-enforce-todo-dependencies t)

;; 在任务完成的时候，除了有默认的时间外，  还可以增加一个 note
(setq org-log-done 'note)

;; 优先级范围和默认任务的优先级
(setq org-highest-priority ?A)
(setq org-lowest-priority  ?E)
(setq org-default-priority ?E)
;; 优先级醒目外观
(setq org-priority-faces
  '((?A . (:background "red" :foreground "white" :weight bold))
    (?B . (:background "DarkOrange" :foreground "white" :weight bold))
    (?C . (:background "yellow" :foreground "DarkGreen" :weight bold))
    (?D . (:background "DodgerBlue" :foreground "black" :weight bold))
    (?E . (:background "SkyBlue" :foreground "black" :weight bold))
    ))

(setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))